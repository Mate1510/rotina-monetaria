// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model FinanceTransaction {
    id        String          @id @default(cuid())
    name      String
    value     Decimal         @db.Decimal(9, 2)
    type      TransactionType
    date      DateTime
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    Goal   Goal?   @relation(fields: [goalId], references: [id])
    goalId String?
}

model Category {
    id              String          @id @default(cuid())
    name            String
    color           Color           @default(BLACK)
    transactionType TransactionType
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    Transaction FinanceTransaction[]
}

model Goal {
    id               String   @id @default(cuid())
    name             String
    finalGoalValue   Decimal  @db.Decimal(9, 2)
    currentGoalValue Decimal  @db.Decimal(9, 2)
    finalGoalDate    DateTime
    color            Color    @default(BLACK)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    transactions FinanceTransaction[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    // Next Auth
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // My Project
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    lastEntry          DateTime?
    status             Status               @default(ACTIVE)
    role               Role                 @default(USER)
    transactions       FinanceTransaction[]
    categories         Category[]
    goals              Goal[]
    PasswordResetToken PasswordResetToken?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    userId    String   @unique
    token     String   @unique
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}

enum Status {
    ACTIVE
    INACTIVE
}

enum Role {
    USER
    ADMIN
}

enum TransactionType {
    INCOME
    EXPENSE
}

enum Color {
    BLACK
    RED
    BLUE
    GREEN
    YELLOW
    AQUA
    PURPLE
    ORANGE
    PINK
    WHITE
}
